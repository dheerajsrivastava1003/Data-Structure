import java.util.Scanner;

public class Queue {
    private int front, rear, size, capacity;
    private int[] queue;

    // Constructor to initialize the queue
    public Queue(int capacity) {
        this.capacity = capacity;
        front = 0;
        rear = -1;
        size = 0;
        queue = new int[capacity];
    }

    // Check if the queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Enqueue operation to add an element to the queue
    public void enqueue(int data) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
            return;
        }
        rear = (rear + 1) % capacity;  // Move rear to next position in a circular way
        queue[rear] = data;
        size++;
        System.out.println(data + " enqueued to the queue.");
    }

    // Dequeue operation to remove and return the front element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return Integer.MIN_VALUE;
        }
        int data = queue[front];
        front = (front + 1) % capacity;  // Move front to next position in a circular way
        size--;
        return data;
    }

    // Peek operation to get the front element without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return Integer.MIN_VALUE;
        }
        return queue[front];
    }

    // Get the current size of the queue
    public int size() {
        return size;
    }

    // Method to display the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue: ");
        for (int i = 0; i < size; i++) {
            System.out.print(queue[(front + i) % capacity] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the capacity of the queue: ");
        int capacity = scanner.nextInt();
        Queue queue = new Queue(capacity);

        while (true) {
            System.out.println("\nQueue Operations Menu:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Check if Queue is Empty");
            System.out.println("5. Check if Queue is Full");
            System.out.println("6. Display Queue");
            System.out.println("7. Get Size of Queue");
            System.out.println("8. Exit");

            System.out.print("Choose an operation: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the element to enqueue: ");
                    int data = scanner.nextInt();
                    queue.enqueue(data);
                    break;
                case 2:
                    int dequeuedElement = queue.dequeue();
                    if (dequeuedElement != Integer.MIN_VALUE)
                        System.out.println("Dequeued element: " + dequeuedElement);
                    break;
                case 3:
                    int peekElement = queue.peek();
                    if (peekElement != Integer.MIN_VALUE)
                        System.out.println("Front element: " + peekElement);
                    break;
                case 4:
                    System.out.println(queue.isEmpty() ? "Queue is empty." : "Queue is not empty.");
                    break;
                case 5:
                    System.out.println(queue.isFull() ? "Queue is full." : "Queue is not full.");
                    break;
                case 6:
                    queue.display();
                    break;
                case 7:
                    System.out.println("Size of queue: " + queue.size());
                    break;
                case 8:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
